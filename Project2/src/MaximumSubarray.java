/**
 * (α) Περιγραφή του Αλγορίθμου
 * Ο αλγόριθμος που θα χρησιμοποιήσουμε για να βρούμε το μέγιστο άθροισμα συνεχόμενου υποπίνακα (maximum sum subarray)
 * είναι γνωστός ως αλγόριθμος του Kadane. Η βασική ιδέα του αλγορίθμου είναι να διατηρούμε δύο μεταβλητές:
 *
 * currentMax: το μέγιστο άθροισμα του υποπίνακα που τελειώνει στην τρέχουσα θέση.
 * globalMax: το μέγιστο άθροισμα που έχουμε βρει μέχρι στιγμής.
 * Η διαδικασία είναι η εξής:
 *
 * Ξεκινάμε με currentMax και globalMax ίσα με το πρώτο στοιχείο του πίνακα.
 * Για κάθε στοιχείο του πίνακα από το δεύτερο μέχρι το τελευταίο:
 * Ενημερώνουμε το currentMax ως το μέγιστο μεταξύ του τρέχοντος στοιχείου και του αθροίσματος του currentMax με το τρέχον στοιχείο.
 * Ενημερώνουμε το globalMax αν το currentMax είναι μεγαλύτερο από το globalMax.
 * Στο τέλος, το globalMax θα περιέχει το μέγιστο άθροισμα του συνεχόμενου υποπίνακα.
 *
 * (γ) Πολυπλοκότητα Χρόνου
 * Η πολυπλοκότητα του αλγορίθμου είναι O(n) γιατί:
 *
 * Διατρέχουμε τον πίνακα μία φορά, εκτελώντας σταθερές αριθμητικές πράξεις (π.χ. προσθέσεις και συγκρίσεις) για κάθε στοιχείο.
 * Δεν χρησιμοποιούμε επιπλέον πίνακες ή δομές δεδομένων που να εξαρτώνται από το μέγεθος του πίνακα, οπότε η επιπλέον χωρητικότητα
 * είναι O(1).
 * Συνολικά, ο αλγόριθμος είναι αποδοτικός και κατάλληλος για την εύρεση του μέγιστου αθροίσματος συνεχόμενου υποπίνακα σε γραμμικό χρόνο.
 */


public class MaximumSubarray {
    public static int maxSumSubarray(int[] arr) {
        // Αν ο πίνακας είναι κενός, επιστρέφουμε 0
        if (arr.length == 0) {
            return 0;
        }

        // Αρχικοποίηση μεταβλητών
        int currentMax = arr[0]; // Το μέγιστο άθροισμα υποπίνακα που τελειώνει εδώ
        int globalMax = arr[0];  // Το μέγιστο άθροισμα που έχουμε δει συνολικά

        // Επανάληψη για κάθε στοιχείο του πίνακα (από τη δεύτερη θέση)
        for (int i = 1; i < arr.length; i++) {
            // Υπολογίζουμε το τοπικό μέγιστο
            currentMax = Math.max(currentMax + arr[i], arr[i]);

            // Ενημερώνουμε το συνολικό μέγιστο αν χρειάζεται
            globalMax = Math.max(globalMax, currentMax);
        }

        // Επιστρέφουμε το μέγιστο άθροισμα
        return globalMax;
    }

    public static void main(String[] args) {
        // Παράδειγμα πίνακα
        int[] arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};

        // Υπολογίζουμε το μέγιστο άθροισμα
        int maxSum = maxSumSubarray(arr);

        // Εκτύπωση αποτελέσματος
        System.out.println("Το μέγιστο άθροισμα υποπίνακα είναι: " + maxSum);
    }
}